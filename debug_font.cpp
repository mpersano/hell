#include <cstdarg>

#include "pixmap.h"
#include "vertex_array.h"
#include "debug_font.h"

namespace {

static const int CHARS_IN_FONT = 128;

static const int CHAR_WIDTH = 8;
static const int CHAR_HEIGHT = 8;

static const uint8_t pixels[CHARS_IN_FONT*CHAR_HEIGHT] {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00, 
	0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x14, 0x14, 0x7f, 0x14, 0x7f, 0x14, 0x14, 0x00, 
	0x08, 0x1e, 0x28, 0x1c, 0x0a, 0x3c, 0x08, 0x00, 
	0x00, 0x32, 0x34, 0x08, 0x16, 0x26, 0x00, 0x00, 
	0x18, 0x28, 0x10, 0x28, 0x46, 0x44, 0x3a, 0x00, 
	0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00, 
	0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00, 
	0x08, 0x49, 0x2a, 0x1c, 0x2a, 0x49, 0x08, 0x00, 
	0x08, 0x08, 0x08, 0x7f, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x04, 0x08, 
	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 
	0x1c, 0x22, 0x22, 0x2a, 0x22, 0x22, 0x1c, 0x00, 
	0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00, 
	0x1c, 0x22, 0x02, 0x04, 0x08, 0x10, 0x3e, 0x00, 
	0x1c, 0x22, 0x02, 0x0c, 0x02, 0x22, 0x1c, 0x00, 
	0x0c, 0x14, 0x24, 0x3e, 0x04, 0x04, 0x0e, 0x00, 
	0x3e, 0x20, 0x20, 0x3c, 0x02, 0x22, 0x1c, 0x00, 
	0x1c, 0x22, 0x20, 0x3c, 0x22, 0x22, 0x1c, 0x00, 
	0x3e, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00, 
	0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00, 
	0x1c, 0x22, 0x22, 0x1e, 0x02, 0x22, 0x1c, 0x00, 
	0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x00, 
	0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x04, 0x08, 
	0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 
	0x00, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 
	0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x00, 
	0x1c, 0x22, 0x02, 0x04, 0x08, 0x00, 0x08, 0x00, 
	0x1c, 0x22, 0x2e, 0x2a, 0x2e, 0x20, 0x1c, 0x00, 
	0x1c, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00, 
	0x3c, 0x22, 0x22, 0x3c, 0x22, 0x22, 0x3c, 0x00, 
	0x1c, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00, 
	0x3c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3c, 0x00, 
	0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x3e, 0x00, 
	0x3e, 0x20, 0x20, 0x3e, 0x20, 0x20, 0x20, 0x00, 
	0x1c, 0x22, 0x20, 0x2e, 0x22, 0x22, 0x1c, 0x00, 
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00, 
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00, 
	0x0e, 0x04, 0x04, 0x04, 0x24, 0x24, 0x18, 0x00, 
	0x22, 0x22, 0x24, 0x38, 0x24, 0x22, 0x22, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1e, 0x00, 
	0x41, 0x63, 0x55, 0x49, 0x41, 0x41, 0x41, 0x00, 
	0x22, 0x32, 0x2a, 0x2a, 0x26, 0x22, 0x22, 0x00, 
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00, 
	0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10, 0x10, 0x00, 
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x06, 
	0x3c, 0x22, 0x22, 0x3c, 0x28, 0x24, 0x22, 0x00, 
	0x1c, 0x22, 0x20, 0x1c, 0x02, 0x22, 0x1c, 0x00, 
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00, 
	0x22, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 
	0x41, 0x41, 0x41, 0x2a, 0x2a, 0x14, 0x14, 0x00, 
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00, 
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3e, 0x00, 
	0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x00, 
	0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 
	0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c, 0x00, 
	0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
	0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1c, 0x02, 0x1e, 0x22, 0x22, 0x1d, 0x00, 
	0x10, 0x10, 0x1c, 0x12, 0x12, 0x12, 0x2c, 0x00, 
	0x00, 0x00, 0x1c, 0x20, 0x20, 0x20, 0x1c, 0x00, 
	0x02, 0x02, 0x0e, 0x12, 0x12, 0x12, 0x0d, 0x00, 
	0x00, 0x00, 0x1c, 0x22, 0x3e, 0x20, 0x1c, 0x00, 
	0x0c, 0x12, 0x10, 0x38, 0x10, 0x10, 0x10, 0x00, 
	0x00, 0x00, 0x1d, 0x22, 0x22, 0x1e, 0x02, 0x1c, 
	0x20, 0x20, 0x2c, 0x32, 0x22, 0x22, 0x22, 0x00, 
	0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x30, 
	0x20, 0x20, 0x24, 0x28, 0x30, 0x28, 0x24, 0x00, 
	0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0xb6, 0x49, 0x49, 0x41, 0x41, 0x00, 
	0x00, 0x00, 0x2c, 0x12, 0x12, 0x12, 0x12, 0x00, 
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00, 
	0x00, 0x00, 0x2c, 0x12, 0x12, 0x1c, 0x10, 0x10, 
	0x00, 0x00, 0x1a, 0x24, 0x24, 0x1c, 0x04, 0x04, 
	0x00, 0x00, 0x2c, 0x30, 0x20, 0x20, 0x20, 0x00, 
	0x00, 0x00, 0x1c, 0x20, 0x18, 0x04, 0x38, 0x00, 
	0x00, 0x08, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x1a, 0x00, 
	0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00, 
	0x00, 0x00, 0x41, 0x41, 0x49, 0x55, 0x22, 0x00, 
	0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00, 
	0x00, 0x00, 0x12, 0x12, 0x12, 0x0e, 0x02, 0x1c, 
	0x00, 0x00, 0x3c, 0x04, 0x08, 0x10, 0x3c, 0x00, 
	0x0c, 0x10, 0x10, 0x20, 0x10, 0x10, 0x0c, 0x00, 
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
	0x30, 0x08, 0x08, 0x04, 0x08, 0x08, 0x30, 0x00, 
	0x00, 0x00, 0x30, 0x49, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

static const int COLS = 4;
static const int ROWS = CHARS_IN_FONT/COLS;

}

namespace gge {

debug_font::debug_font()
{
	pixmap<PIXEL_GRAY> pm(COLS*CHAR_WIDTH, ROWS*CHAR_HEIGHT);

	uint8_t *dest = &pm.data[0];

	for (int r = 0; r < ROWS; r++) {
		for (int i = 0; i < CHAR_HEIGHT; i++) {
			for (int c = 0; c < COLS; c++) {
				int ch = r*COLS + c;
				uint8_t bm = pixels[ch*CHAR_HEIGHT + i];

				for (int j = 0; j < CHAR_WIDTH; j++)
					*dest++ = bm & (1 << (CHAR_WIDTH - 1 - j)) ? 255 : 0;
			}
		}
	}

	texture_.load(pm);

	texture_.set_wrap_s(GL_CLAMP);
	texture_.set_wrap_t(GL_CLAMP);

	texture_.set_mag_filter(GL_LINEAR);
	texture_.set_min_filter(GL_LINEAR);

	texture_.set_env_mode(GL_MODULATE);
}

void
debug_font::draw_string_f(float x, float y, const char *fmt, ...) const
{
	char buf[512];

	va_list ap;

	va_start(ap, fmt);
	vsprintf(buf, fmt, ap);
	va_end(ap);

	draw_string(x, y, buf);
}

void
debug_font::draw_string(float x, float y, const char *str) const
{
	glEnable(GL_TEXTURE_2D);
	texture_.bind();

	glEnable(GL_BLEND);
	glBlendFunc(GL_ONE, GL_ONE);

	vertex_array<vertex_texuv> va;

	for (const char *p = str; *p; p++) {
		const int ch = *p;

		const int r = ch/COLS;
		const int c = ch%COLS;

		const float du = 1./COLS;
		const float dv = 1./ROWS;

		const float u0 = du*c;
		const float u1 = u0 + du;

		const float v0 = dv*r;
		const float v1 = v0 + dv;

		const float x0 = x - .5*CHAR_WIDTH;
		const float x1 = x + .5*CHAR_HEIGHT;

		const float y0 = y + .5*CHAR_HEIGHT;
		const float y1 = y - .5*CHAR_HEIGHT;

		va.add_vertex(x0, y0, u0, v0);
		va.add_vertex(x1, y0, u1, v0);
		va.add_vertex(x1, y1, u1, v1);
		va.add_vertex(x0, y1, u0, v1);

		x += CHAR_WIDTH;
	}

	va.draw(GL_QUADS);

	glDisable(GL_BLEND);
	glDisable(GL_TEXTURE_2D);
}

} // gge
